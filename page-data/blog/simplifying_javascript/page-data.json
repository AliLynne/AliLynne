{"componentChunkName":"component---src-templates-blog-js","path":"/blog/simplifying_javascript","webpackCompilationHash":"84b714ed957fa903b427","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Notes from Simplifying Javascript","date":"2019-11-03","tags":["JavaScript"]},"html":"<h1>Chapter 1</h1>\n<h2>Tip 1</h2>\n<p>My general intuition about <code class=\"language-text\">const</code> and <code class=\"language-text\">let</code> has pretty much always been \"use const unless you can't.\" Tip one seems to confirm that.</p>\n<p>Using const makes code readable and predictable.</p>\n<h2>Tips 2 &#x26; 3</h2>\n<p><code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are block scoped - any variable declared inside a block doesn't exist outside a block</p>\n<p>with <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> you can't redeclare a variable of the same name</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"AliLynne\"</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"Ali Thompson\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'me' has already been declared</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"AliLynne\"</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"Ali Thompson\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'me' has already been declared</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"AliLynne\"</span>\n\n<span class=\"token operator\">...</span>\n\nme <span class=\"token operator\">=</span> <span class=\"token string\">\"Ali Thompson\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ali Thompson</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>\"Variables assigned with var are functionally scoped (which, again, is technically referred to as lexically scoped). That means that they’ll always refer to the last value they’re assigned within a function.\"</p>\n</blockquote>\n<blockquote>\n<p>\"closures (creating a variable inside a function for another function to use)\"</p>\n</blockquote>\n<blockquote>\n<p>\"higher-order functions (functions that return other functions)\"</p>\n</blockquote>\n<ul>\n<li>Self invoking functions? - More to come in Tip 34</li>\n</ul>\n<blockquote>\n<p>\"<code class=\"language-text\">let</code> locks the value during each iteration of the for loop.\"</p>\n</blockquote>\n<h2>Tip 4</h2>\n<p>Template literals</p>\n<ul>\n<li>use backticks <code class=\"language-text\">`I&#39;m a string`</code></li>\n<li>\n<p>anything not a string needs to be surrounded by a special designator </p>\n<ul>\n<li><code class=\"language-text\">`${}`</code> - <code class=\"language-text\">`${notAString}`</code></li>\n</ul>\n</li>\n<li>\n<p>can call a method on an object</p>\n<ul>\n<li><code class=\"language-text\">`${object.toUpperCase()} `</code></li>\n</ul>\n</li>\n<li>\n<p>avoid doing too much withing the curly braces</p>\n<ul>\n<li>assign anything complicated to a variable outside the template literal</li>\n</ul>\n</li>\n<li>use backticks even when combining two variables, signals that a string is being returned</li>\n</ul>\n<h1>Chapter 4 - Arrays</h1>\n<blockquote>\n<p>An array \"can do almost anything you'd ever want for a collection of information.\"</p>\n</blockquote>\n<blockquote>\n<p>Data can always be converted to arrays</p>\n</blockquote>\n<h2>Tip 5</h2>\n<ul>\n<li>\n<p>If you need to manipulate a collection an array is likely the way to go due to their flexibility</p>\n<ul>\n<li>Arrays preserve order</li>\n<li>not technically guaranteed, but safe to assume it will usually work</li>\n<li>But can sort to give the array a new order (read tip 9 for more)</li>\n<li>Arrays are used as a bridge between an object and a loop when using <code class=\"language-text\">Object.keys()</code></li>\n<li>\n<p>then use the keys to loop through the object </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token punctuation\">:</span> <span class=\"token string\">\"object1value1\"</span><span class=\"token punctuation\">,</span>\n  key2<span class=\"token punctuation\">:</span> <span class=\"token string\">\"object1value2\"</span><span class=\"token punctuation\">,</span>\n  key3<span class=\"token punctuation\">:</span> <span class=\"token string\">\"object1value3\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token punctuation\">:</span> <span class=\"token string\">\"object2value1\"</span><span class=\"token punctuation\">,</span>\n  key2<span class=\"token punctuation\">:</span> <span class=\"token string\">\"object2value2\"</span><span class=\"token punctuation\">,</span>\n  key3<span class=\"token punctuation\">:</span> <span class=\"token string\">\"object2value3\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// because the keys for both objects are identical, it doesn't matter which object we use to get the list of keys</span>\n<span class=\"token keyword\">const</span> keyList <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// now we can loop through either of the objects using their keys</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keyList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I'm a value of the first object: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I'm a value of the second object </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Arrays seem to pop up everywhere because they have a built-in iterable.</p>\n</blockquote>\n<blockquote>\n<p>An iterable is merely a way for the code to go through a collection one item at at time while knowing its current position.</p>\n</blockquote>\n<blockquote>\n<p>you can easily convert from an array to a specialized collection and back again</p>\n</blockquote>\n<h2>Tip 6</h2>\n<p>Will often see checking whether something exists in array with this sort of code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkExists</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here, <code class=\"language-text\">indexOf()</code> returns the index of the string we're checking for if it's there, and if not, it return -1. So anything greater than -1 (even 0, since 0 is a possible index even though it evaluates to falsy) means the string exists in the array.</p>\n<p>Now that we have <code class=\"language-text\">includes()</code> it's the better option when checking for existence.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'item2'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkExists</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is clearer when read later or by someone else.</p>\n<h2>Tip 7</h2>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"simplifying_javascript"}}}